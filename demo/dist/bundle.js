!function(t,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var o=r();for(var i in o)("object"==typeof exports?exports:t)[i]=o[i]}}(window,function(){return function(t){var r={};function o(i){if(r[i])return r[i].exports;var s=r[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,o),s.l=!0,s.exports}return o.m=t,o.c=r,o.d=function(t,r,i){o.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:i})},o.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},o.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(r,"a",r),r},o.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},o.p="",o(o.s=2)}([function(t,r,o){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var i=function(){function t(t,r,o){this.factorAprendizaje=.5,this.umbral=1,this.salidaDeseada=r,this.sinapsis=0,this.error=0,this.funcionActivacion=o,this.setDatos(t)}return t.prototype.salida=function(){return this.funcionActivacion?"sigmoidal"===this.funcionActivacion?1/(1+Math.pow(Math.E,-this.sinapsis)):void 0:this.sinapsis>=0?1:0},t.prototype.reajustarPesos=function(t){for(var r=0;r<t.length;r++)t[r]+=this.factorAprendizaje*this.error*this.datos[r]},t.prototype.calcularSinapsis=function(t){this.sinapsis=0;for(var r=0;r<t.length;r++)this.sinapsis+=this.datos[r]*t[r];return this},t.prototype.calcularError=function(){return this.error=this.salidaDeseada-this.salida(),this},t.prototype.setDatos=function(t){return this.datos=t?[this.umbral].concat(t):[this.umbral],this},t.prototype.setSalidaDeseada=function(t){return this.salidaDeseada=t,this},t}();r.ProcesadorSinaptico=i},function(t,r,o){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var i=o(0),s=function(){function t(){this.rangoPesos={MIN:-5,MAX:4.9},this.hasError=!1,this.procesadorSinaptico=[],this.counterErrors=0,this.LIMIT_ERRORS=1e4,this.pesos=null,this.funcionActivacion=null,this.funcBack=function(){}}return t.prototype.addDatos=function(t,r){if(void 0===t[0])return this;if(void 0===t[0][0])return this.procesadorSinaptico.push(new i.ProcesadorSinaptico(t,r,this.funcionActivacion)),this;for(var o=0;o<t.length;o++)this.procesadorSinaptico.push(new i.ProcesadorSinaptico(t[o],r[o],this.funcionActivacion));return this},t.prototype.aprender=function(){if(0!==this.procesadorSinaptico.length){this.pesos||this.asignarPesos();var t=null,r=this.procesadorSinaptico.length;this.hasError=!1;for(var o=0;o<r;o++)(t=this.procesadorSinaptico[o]).calcularSinapsis(this.pesos),t.calcularError(),0!==t.error&&(this.hasError=!0,t.reajustarPesos(this.pesos),this.funcBack());if(this.hasError){if(this.counterErrors++,this.counterErrors>=this.LIMIT_ERRORS)throw this.counterErrors=0,Error("Maximum error limit reached");return this.aprender()}return this.counterErrors=0,this}},t.prototype.procesar=function(t,r){var o=new i.ProcesadorSinaptico(t,null,r);return o.calcularSinapsis(this.pesos),o.salida()},t.prototype.getPesos=function(){return this.pesos},t.prototype.setPesos=function(t){return this.pesos=t,this},t.prototype.setFuncionActivacion=function(t){return this.funcionActivacion=t,this},t.prototype.asignarPesos=function(){for(var t=this.procesadorSinaptico[0].datos.length,r=new Array(t),o=this.rangoPesos.MAX-this.rangoPesos.MIN,i=0;i<t;i++)for(;!r[i];)r[i]=parseFloat((Math.random()*o+this.rangoPesos.MIN).toFixed(4));this.setPesos(r),this.funcBack()},t}();r.Perceptron=s},function(t,r,o){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var i=o(1);r.Perceptron=i.Perceptron}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,