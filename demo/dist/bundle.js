!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var i in r)("object"==typeof exports?exports:t)[i]=r[i]}}(window,function(){return function(t){var e={};function r(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=3)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sigmoidal=function(t){return 1/(1+Math.pow(Math.E,-t))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),s=function(){function t(t,e,r){this.learningFactor=.5,this.threshold=1,this.synapse=0,this.error=0,this.activationFunction=r,this.setExpectedOutput(e),this.setData(t)}return t.prototype.output=function(){return"sigmoidal"===this.activationFunction?i.sigmoidal(this.synapse):this.synapse>=0?1:0},t.prototype.recalculateWeights=function(t){for(var e=0;e<t.length;e++)t[e]+=this.learningFactor*this.error*this.data[e]},t.prototype.calculateSynapses=function(t){this.synapse=0;for(var e=0;e<t.length;e++)this.synapse+=this.data[e]*t[e];return this},t.prototype.calculateError=function(){return this.error=this.expectedOutput-this.output(),this},t.prototype.setData=function(t){return this.data=t?[this.threshold].concat(t):[this.threshold],this},t.prototype.setExpectedOutput=function(t){return this.expectedOutput=t,this},t}();e.SynapticProcessor=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1);e.LIMIT_ERRORS=1e4;var s=function(){function t(t){this.rangeWeight={MIN:-5,MAX:4.9},this.synapticProcessor=[],this.counterErrors=0,this.hasError=!1,this.weights=null,this.funcBack=t||function(){}}return t.prototype.addData=function(t,e){if(void 0===t[0])return this;if(void 0===t[0][0])return this.synapticProcessor.push(new i.SynapticProcessor(t,e,this.activationFunction)),this;for(var r=0;r<t.length;r++)this.synapticProcessor.push(new i.SynapticProcessor(t[r],e[r],this.activationFunction));return this},t.prototype.learn=function(){if(0!==this.synapticProcessor.length){this.weights||this.assignWeights();var t=null;this.hasError=!1;for(var r=0;r<this.synapticProcessor.length;r++)(t=this.synapticProcessor[r]).calculateSynapses(this.weights),t.calculateError(),0!==t.error&&(this.hasError=!0,t.recalculateWeights(this.weights),this.funcBack());if(this.hasError){if(this.counterErrors++,this.counterErrors>=e.LIMIT_ERRORS)throw this.counterErrors=0,Error("Maximum error limit reached");return this.learn()}return this.counterErrors=0,this}},t.prototype.process=function(t,e){var r=new i.SynapticProcessor(t,null,e);return r.calculateSynapses(this.weights),r.output()},t.prototype.setWeights=function(t){return this.weights=t,this},t.prototype.setActivationFunction=function(t){return this.activationFunction=t,this},t.prototype.assignWeights=function(){for(var t=this.synapticProcessor[0].data.length,e=new Array(t),r=this.rangeWeight.MAX-this.rangeWeight.MIN,i=0;i<t;i++)for(;!e[i];)e[i]=parseFloat((Math.random()*r+this.rangeWeight.MIN).toFixed(4));this.setWeights(e),this.funcBack()},t}();e.Perceptron=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(2);e.Perceptron=i.Perceptron}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aXZhdGlvbi1mdW5jdGlvbnMvc2lnbW9pZGFsLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9zeW5hcHRpYy1wcm9jZXNzb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BlcmNlcHRyb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJzaWdtb2lkYWwiLCJzeW5hcHNlIiwiTWF0aCIsInBvdyIsIkUiLCJzaWdtb2lkYWxfZnVuY3Rpb25fMSIsIlN5bmFwdGljUHJvY2Vzc29yIiwiZGF0YSIsImV4cGVjdGVkT3V0cHV0IiwiYWN0aXZhdGlvbkZ1bmN0aW9uIiwidGhpcyIsImxlYXJuaW5nRmFjdG9yIiwidGhyZXNob2xkIiwiZXJyb3IiLCJzZXRFeHBlY3RlZE91dHB1dCIsInNldERhdGEiLCJvdXRwdXQiLCJyZWNhbGN1bGF0ZVdlaWdodHMiLCJ3ZWlnaHRzIiwibGVuZ3RoIiwiY2FsY3VsYXRlU3luYXBzZXMiLCJjYWxjdWxhdGVFcnJvciIsImNvbmNhdCIsInN5bmFwdGljX3Byb2Nlc3Nvcl8xIiwiTElNSVRfRVJST1JTIiwiUGVyY2VwdHJvbiIsImNhbGxiYWNrIiwicmFuZ2VXZWlnaHQiLCJNSU4iLCJNQVgiLCJzeW5hcHRpY1Byb2Nlc3NvciIsImNvdW50ZXJFcnJvcnMiLCJoYXNFcnJvciIsImZ1bmNCYWNrIiwiYWRkRGF0YSIsInVuZGVmaW5lZCIsInB1c2giLCJsZWFybiIsImFzc2lnbldlaWdodHMiLCJFcnJvciIsInByb2Nlc3MiLCJzZXRXZWlnaHRzIiwic2V0QWN0aXZhdGlvbkZ1bmN0aW9uIiwiZGF0YVNpemUiLCJBcnJheSIsInJhbmdlIiwicGFyc2VGbG9hdCIsInJhbmRvbSIsInRvRml4ZWQiLCJwZXJjZXB0cm9uXzEiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0Esb0JBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELFNBQ0Esc0JBQUFHLGVBQUFDLElBQ0FELFVBQUFILE9BQ0EsQ0FDQSxJQUFBSyxFQUFBTCxJQUNBLFFBQUFNLEtBQUFELEdBQUEsaUJBQUFKLGdCQUFBRixHQUFBTyxHQUFBRCxFQUFBQyxJQVBBLENBU0NDLE9BQUEsV0FDRCxtQkNUQSxJQUFBQyxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBVCxRQUdBLElBQUFDLEVBQUFNLEVBQUFFLElBQ0FKLEVBQUFJLEVBQ0FDLEdBQUEsRUFDQVYsWUFVQSxPQU5BVyxFQUFBRixHQUFBRyxLQUFBWCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBUSxHQUdBUCxFQUFBUyxHQUFBLEVBR0FULEVBQUFELFFBMkNBLE9BdENBUSxFQUFBSyxFQUFBRixFQUdBSCxFQUFBTSxFQUFBUCxFQUdBQyxFQUFBTyxFQUFBLFNBQUFmLEVBQUFnQixFQUFBQyxHQUNBVCxFQUFBVSxFQUFBbEIsRUFBQWdCLElBQ0FHLE9BQUFDLGVBQUFwQixFQUFBZ0IsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFOLEtBTUFULEVBQUFnQixF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RCxFQUFJLEVBQUdBLEVBQUl3RSxFQUFVeEUsSUFDMUIsTUFBUStDLEVBQVEvQyxJQUNaK0MsRUFBUS9DLEdBQUsyRSxZQUNSNUMsS0FBSzZDLFNBQVdGLEVBQVFuQyxLQUFLaUIsWUFBWUMsS0FBS29CLFFBQVEsSUFLbkV0QyxLQUFLK0IsV0FBV3ZCLEdBQ2hCUixLQUFLdUIsWUFFYlIsRUFoSUEsR0FBYTNELEVBQUEyRCw0RkNKYixJQUFBd0IsRUFBQTNFLEVBQUEsR0FFU1IsRUFBQTJELFdBRkF3QixFQUFBeEIiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBzaWdtb2lkYWwoc3luYXBzZSkge1xuICAgIHJldHVybiAxIC8gKDEgKyBNYXRoLnBvdyhNYXRoLkUsIC1zeW5hcHNlKSk7XG59XG4iLCJpbXBvcnQgeyBzaWdtb2lkYWwgfSBmcm9tICcuL2FjdGl2YXRpb24tZnVuY3Rpb25zL3NpZ21vaWRhbC5mdW5jdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBTeW5hcHRpY1Byb2Nlc3NvciB7XG4gICAgYWN0aXZhdGlvbkZ1bmN0aW9uOiBzdHJpbmc7XG4gICAgZXJyb3I6IG51bWJlcjtcbiAgICBzeW5hcHNlOiBudW1iZXI7XG4gICAgZXhwZWN0ZWRPdXRwdXQ6IGFueTtcbiAgICBkYXRhOiBudW1iZXJbXTtcbiAgICB0aHJlc2hvbGQ6IG51bWJlcjtcbiAgICBsZWFybmluZ0ZhY3RvcjogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSwgZXhwZWN0ZWRPdXRwdXQsIGFjdGl2YXRpb25GdW5jdGlvbjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubGVhcm5pbmdGYWN0b3IgPSAwLjU7XG4gICAgICAgIHRoaXMudGhyZXNob2xkID0gMTtcblxuICAgICAgICB0aGlzLnN5bmFwc2UgPSAwO1xuICAgICAgICB0aGlzLmVycm9yID0gMDtcbiAgICAgICAgdGhpcy5hY3RpdmF0aW9uRnVuY3Rpb24gPSBhY3RpdmF0aW9uRnVuY3Rpb247XG5cbiAgICAgICAgdGhpcy5zZXRFeHBlY3RlZE91dHB1dChleHBlY3RlZE91dHB1dCk7XG4gICAgICAgIHRoaXMuc2V0RGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIG91dHB1dCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmF0aW9uRnVuY3Rpb24gPT09ICdzaWdtb2lkYWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbW9pZGFsKHRoaXMuc3luYXBzZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zeW5hcHNlID49IDAgPyAxIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSB3ZWlnaHRzXG4gICAgICovXG4gICAgcmVjYWxjdWxhdGVXZWlnaHRzKHdlaWdodHM6IG51bWJlcltdKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2VpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgd2VpZ2h0c1tpXSArPSB0aGlzLmxlYXJuaW5nRmFjdG9yICogdGhpcy5lcnJvciAqIHRoaXMuZGF0YVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IHdlaWdodHMgXG4gICAgICogQHJldHVybnMgIFxuICAgICAqL1xuICAgIGNhbGN1bGF0ZVN5bmFwc2VzKHdlaWdodHM6IG51bWJlcltdKSB7XG4gICAgICAgIHRoaXMuc3luYXBzZSA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3ZWlnaHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmFwc2UgKz0gdGhpcy5kYXRhW2ldICogd2VpZ2h0c1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNhbGN1bGF0ZUVycm9yKCkge1xuICAgICAgICB0aGlzLmVycm9yID0gdGhpcy5leHBlY3RlZE91dHB1dCAtIHRoaXMub3V0cHV0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGEgPyBbdGhpcy50aHJlc2hvbGRdLmNvbmNhdChkYXRhKSA6IFt0aGlzLnRocmVzaG9sZF07XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0RXhwZWN0ZWRPdXRwdXQoZXhwZWN0ZWRPdXRwdXQpIHtcbiAgICAgICAgdGhpcy5leHBlY3RlZE91dHB1dCA9IGV4cGVjdGVkT3V0cHV0O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFN5bmFwdGljUHJvY2Vzc29yIH0gZnJvbSAnLi9zeW5hcHRpYy1wcm9jZXNzb3InO1xuXG5leHBvcnQgY29uc3QgTElNSVRfRVJST1JTOiBudW1iZXIgPSAxMDAwMDtcblxuZXhwb3J0IGNsYXNzIFBlcmNlcHRyb24ge1xuICAgIGNvdW50ZXJFcnJvcnM6IG51bWJlcjtcbiAgICBzeW5hcHRpY1Byb2Nlc3NvcjogU3luYXB0aWNQcm9jZXNzb3JbXTtcbiAgICBoYXNFcnJvcjogYm9vbGVhbjtcbiAgICB3ZWlnaHRzOiBudW1iZXJbXTtcbiAgICByYW5nZVdlaWdodDogeyBNSU46IG51bWJlcjsgTUFYOiBudW1iZXIgfTtcblxuICAgIHB1YmxpYyBmdW5jQmFjazogKCkgPT4gdm9pZDtcbiAgICBwcml2YXRlIGFjdGl2YXRpb25GdW5jdGlvbjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMucmFuZ2VXZWlnaHQgPSB7IE1JTjogLTUsIE1BWDogNC45IH07XG4gICAgICAgIHRoaXMuc3luYXB0aWNQcm9jZXNzb3IgPSBbXTtcbiAgICAgICAgdGhpcy5jb3VudGVyRXJyb3JzID0gMDtcbiAgICAgICAgdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLndlaWdodHMgPSBudWxsO1xuICAgICAgICB0aGlzLmZ1bmNCYWNrID0gY2FsbGJhY2sgfHwgKCgpID0+IHt9KTtcbiAgICB9XG5cbiAgICBhZGREYXRhKGRhdGEsIG91dHB1dCkge1xuICAgICAgICBpZiAoZGF0YVswXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhWzBdWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3luYXB0aWNQcm9jZXNzb3IucHVzaChcbiAgICAgICAgICAgICAgICBuZXcgU3luYXB0aWNQcm9jZXNzb3IoZGF0YSwgb3V0cHV0LCB0aGlzLmFjdGl2YXRpb25GdW5jdGlvbilcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmFwdGljUHJvY2Vzc29yLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IFN5bmFwdGljUHJvY2Vzc29yKFxuICAgICAgICAgICAgICAgICAgICBkYXRhW2ldLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbaV0sXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGxlYXJuKCkge1xuICAgICAgICBpZiAodGhpcy5zeW5hcHRpY1Byb2Nlc3Nvci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy53ZWlnaHRzKSB7XG4gICAgICAgICAgICB0aGlzLmFzc2lnbldlaWdodHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzeW5hcHRpY1Byb2Nlc3NvcjogU3luYXB0aWNQcm9jZXNzb3IgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3luYXB0aWNQcm9jZXNzb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN5bmFwdGljUHJvY2Vzc29yID0gdGhpcy5zeW5hcHRpY1Byb2Nlc3NvcltpXTtcblxuICAgICAgICAgICAgc3luYXB0aWNQcm9jZXNzb3IuY2FsY3VsYXRlU3luYXBzZXModGhpcy53ZWlnaHRzKTtcbiAgICAgICAgICAgIHN5bmFwdGljUHJvY2Vzc29yLmNhbGN1bGF0ZUVycm9yKCk7XG5cbiAgICAgICAgICAgIGlmIChzeW5hcHRpY1Byb2Nlc3Nvci5lcnJvciAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN5bmFwdGljUHJvY2Vzc29yLnJlY2FsY3VsYXRlV2VpZ2h0cyh0aGlzLndlaWdodHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZnVuY0JhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50ZXJFcnJvcnMrKztcblxuICAgICAgICAgICAgaWYgKHRoaXMuY291bnRlckVycm9ycyA+PSBMSU1JVF9FUlJPUlMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXJFcnJvcnMgPSAwO1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ01heGltdW0gZXJyb3IgbGltaXQgcmVhY2hlZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZWFybigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb3VudGVyRXJyb3JzID0gMDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwcm9jZXNzKGRhdGEsIGFjdGl2YXRpb25GdW5jdGlvbj8pIHtcbiAgICAgICAgbGV0IHN5bmFwdGljUHJvY2Vzc29yID0gbmV3IFN5bmFwdGljUHJvY2Vzc29yKFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBhY3RpdmF0aW9uRnVuY3Rpb25cbiAgICAgICAgKTtcblxuICAgICAgICBzeW5hcHRpY1Byb2Nlc3Nvci5jYWxjdWxhdGVTeW5hcHNlcyh0aGlzLndlaWdodHMpO1xuXG4gICAgICAgIHJldHVybiBzeW5hcHRpY1Byb2Nlc3Nvci5vdXRwdXQoKTtcbiAgICB9XG5cbiAgICBzZXRXZWlnaHRzKHdlaWdodHMpIHtcbiAgICAgICAgdGhpcy53ZWlnaHRzID0gd2VpZ2h0cztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXRBY3RpdmF0aW9uRnVuY3Rpb24oYWN0aXZhdGlvbkZ1bmN0aW9uOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hY3RpdmF0aW9uRnVuY3Rpb24gPSBhY3RpdmF0aW9uRnVuY3Rpb247XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3NpZ25XZWlnaHRzKCkge1xuICAgICAgICBsZXQgZGF0YVNpemUgPSB0aGlzLnN5bmFwdGljUHJvY2Vzc29yWzBdLmRhdGEubGVuZ3RoO1xuICAgICAgICBsZXQgd2VpZ2h0cyA9IG5ldyBBcnJheTxudW1iZXI+KGRhdGFTaXplKTtcbiAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5yYW5nZVdlaWdodC5NQVggLSB0aGlzLnJhbmdlV2VpZ2h0Lk1JTjtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFTaXplOyBpKyspIHtcbiAgICAgICAgICAgIHdoaWxlICghd2VpZ2h0c1tpXSkge1xuICAgICAgICAgICAgICAgIHdlaWdodHNbaV0gPSBwYXJzZUZsb2F0KFxuICAgICAgICAgICAgICAgICAgICAoTWF0aC5yYW5kb20oKSAqIHJhbmdlICsgdGhpcy5yYW5nZVdlaWdodC5NSU4pLnRvRml4ZWQoNClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRXZWlnaHRzKHdlaWdodHMpO1xuICAgICAgICB0aGlzLmZ1bmNCYWNrKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUGVyY2VwdHJvbiB9IGZyb20gJy4vcGVyY2VwdHJvbic7XG5cbmV4cG9ydCB7IFBlcmNlcHRyb24gfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=