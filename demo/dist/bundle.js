!function(t,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var e=r();for(var o in e)("object"==typeof exports?exports:t)[o]=e[o]}}(window,function(){return function(t){var r={};function e(o){if(r[o])return r[o].exports;var n=r[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,e),n.l=!0,n.exports}return e.m=t,e.c=r,e.d=function(t,r,o){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:o})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=9)}([function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o,n=e(7),i=e(6),s=e(5),a=e(4);!function(t){t.BINARY="BINARY",t.RELU="RELU",t.SIGMOIDAL="SIGMOIDAL",t.HYPERBOLIC_TANGENT="HYPERBOLIC_TANGENT"}(o=r.ActivationFunctionType||(r.ActivationFunctionType={}));var c=function(){function t(t){void 0===t&&(t=o.BINARY),this.default=t}return t.process=function(r,e){return new t(e).process(r)},t.prototype.process=function(t){var r,e=((r={})[o.BINARY]=a.binary,r[o.RELU]=i.reLU,r[o.SIGMOIDAL]=n.sigmoidal,r[o.HYPERBOLIC_TANGENT]=s.hyperbolicTangent,r);return e[t]||e[this.default]},t}();r.ActivationFunction=c},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(8);r.LIMIT_ERRORS=8e3;var n=function(){function t(t,r){this.rangeWeight={MIN:-5,MAX:4.9},this.counterErrors=0,this.hasError=!1,this.weights=null,this.funcBack=t||function(){},this.activationFunction=r,this.synapticProcessor=new o.SynapticProcessor(r),this.dataStack=[]}return t.prototype.addData=function(t,r){return this.dataStack.push([t,r]),this},t.prototype.learn=function(){this.weights||this.assignWeights(),this.hasError=!1;for(var t=0;t<this.dataStack.length;t++)this.synapticProcessor.setData(this.dataStack[t][0]).setExpectedOutput(this.dataStack[t][1]).calculateSynapses(this.weights).calculateError(),0!==this.synapticProcessor.error&&(this.synapticProcessor.recalculateWeights(this.weights),this.hasError=!0,this.funcBack());if(this.hasError){if(this.counterErrors++,this.counterErrors>=r.LIMIT_ERRORS)throw this.counterErrors=0,Error("Maximum error limit reached");return this.learn()}return this.counterErrors=0,this},t.prototype.process=function(t){return this.synapticProcessor.setData(t).calculateSynapses(this.weights).output()},t.prototype.setWeights=function(t){return this.weights=t,this},t.prototype.setActivationFunction=function(t){return this.activationFunction=t,this},t.prototype.createWeight=function(){for(var t=0,r=this.rangeWeight.MAX-this.rangeWeight.MIN;!t;)t=parseFloat((Math.random()*r+this.rangeWeight.MIN).toFixed(4));return t},t.prototype.assignWeights=function(){for(var t=this.dataStack[0][0].length,r=new Array(t),e=0;e<t;e++)r[e]=this.createWeight();return this.setWeights(r),this.synapticProcessor.threshold=this.createWeight(),this.funcBack(),this},t}();r.Perceptron=n},function(t,r,e){"use strict";var o,n=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var e in r)r.hasOwnProperty(e)&&(t[e]=r[e])},function(t,r){function e(){this.constructor=t}o(t,r),t.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)});Object.defineProperty(r,"__esModule",{value:!0});var i=e(0),s=function(t){function r(r){void 0===r&&(r=!1);var e=t.call(this,null,i.ActivationFunctionType.SIGMOIDAL)||this;return e.isHidden=r,e.error=0,e.outputNeurons=[],e.inputNeurons=[],e}return n(r,t),r.prototype.learn=function(){this.weights||this.assignWeights();for(var t=0;t<this.dataStack.length;t++)this.synapticProcessor.setData(this.dataStack[t][0]).setExpectedOutput(this.dataStack[t][1]).calculateSynapses(this.weights);return this},r.prototype.backpropagation=function(){this.inputNeurons.forEach(function(t,r){t.calculateHiddenError(r)}),this.inputNeurons.length>0&&this.inputNeurons[0].backpropagation()},r.prototype.recalculateWeights=function(){this.synapticProcessor.updateThreshold(this.synapticProcessor.error);for(var t=0;t<this.weights.length;t++)this.weights[t]+=this.synapticProcessor.learningRate*this.synapticProcessor.data[t]*this.synapticProcessor.delta,this.weights[t]=parseFloat(this.weights[t].toFixed(4))},r.prototype.output=function(){return this.synapticProcessor.output()},r.prototype.calculateHiddenError=function(t){var r=0;return this.outputNeurons.forEach(function(e){r+=e.weights[t]*e.synapticProcessor.delta}),this.synapticProcessor.calculateErrorDerivated(r),this.recalculateWeights(),this},r}(e(1).Perceptron);r.Neuron=s},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(2),n=function(){function t(){this.layers=[],this.error=0,this.funcionActivacion="sigmoidal",this.counterErrors=0,this.LIMIT_ERRORS=2500}return t.prototype.forwardpropagation=function(t){var r=t.input,e=t.output,o=[],n=r;return this.layers.forEach(function(t){o.length>0&&(n=o,o=[]),t.forEach(function(t){t.addData(n,e).learn(),o.push(t.output())})}),this},t.prototype.backpropagation=function(){var t=this.layers.length-1;this.layers[t].forEach(function(t){t.synapticProcessor.calculateError(),t.error=t.synapticProcessor.error,t.synapticProcessor.calculateErrorDerivated(t.error),t.error=t.synapticProcessor.delta,t.error>=1e-4&&(console.log(t.synapticProcessor.delta),t.recalculateWeights()),t.backpropagation()})},t.prototype.learn=function(t){var r=this,e=function(){var e=0;t.forEach(function(t){r.forwardpropagation(t),r.backpropagation(),r.layers.forEach(function(t){t.forEach(function(t){e+=t.error*t.error})}),e/=2}),e>=r.error&&r.layers.forEach(function(t){t.forEach(function(t){t.synapticProcessor.learningRate-=.01})}),r.setError(parseFloat(e.toString()).toFixed(4))};for(e();this.error>.001;){if(this.counterErrors++,console.log(this.error,this.counterErrors),this.counterErrors>=this.LIMIT_ERRORS)return this;e()}return this.counterErrors=0,this},t.prototype.addLayer=function(t){var r=this.createLayer(t),e=this.layers.push(r)-1,o=this.layers[e-1];return void 0===o?this:(r.forEach(function(t){t.inputNeurons=o}),o.forEach(function(t){t.outputNeurons=r}),this)},t.prototype.process=function(t){var r=[];return this.layers.forEach(function(e){r.length>0&&(t=r,r=[]),e.forEach(function(e){r.push(e.process(t))})}),r.map(function(t){return Math.round(t)})},t.prototype.setError=function(t){return this.error=t,this},t.prototype.createLayer=function(t){for(var r=[],e=this.layers.length>0,n=0;n<t;n++)r[n]=new o.Neuron(e);return r},t}();r.Backpropagation=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.binary=function(t){return t>=0?1:0}},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.hyperbolicTangent=function(t){return Math.tanh(t)}},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.reLU=function(t){return t>=0?t:0}},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.sigmoidal=function(t){return 1/(1+Math.pow(Math.E,-t))}},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(0),n=function(){function t(t,r,e){void 0===r&&(r=null),void 0===e&&(e=null),this.learningRate=.025,this.error=0,this.activationFunction=t,this.setExpectedOutput(e),this.setData(r)}return t.prototype.output=function(){return o.ActivationFunction.process(this.activationFunction)(this.synapse)},t.prototype.recalculateWeights=function(t){var r=this.expectedOutput-this.output();this.updateThreshold(r),this.calculateDelta(r);for(var e=0;e<t.length;e++)t[e]+=this.data[e]*this.delta},t.prototype.updateThreshold=function(t){this.threshold-=this.learningRate*t},t.prototype.calculateDelta=function(t){return this.delta=this.learningRate*t,this},t.prototype.calculateSynapses=function(t){this.synapse=0;for(var r=0;r<t.length;r++)this.synapse+=this.data[r]*t[r];return this.synapse+=this.threshold,this},t.prototype.calculateError=function(){return this.error=this.expectedOutput-this.output(),this},t.prototype.calculateErrorDerivated=function(t){var r=this.output(),e=r-r*r;return this.delta=t*e,this},t.prototype.setData=function(t){return null===t?this:(this.data=t.slice(),this)},t.prototype.setExpectedOutput=function(t){return this.expectedOutput=t,this},t.prototype.setLearningFactor=function(t){return this.learningRate=t,this},t}();r.SynapticProcessor=n},function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var o=e(1);r.Perceptron=o.Perceptron;var n=e(3);r.Backpropagation=n.Backpropagation}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,