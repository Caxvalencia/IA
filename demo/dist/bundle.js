!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var s=e();for(var r in s)("object"==typeof exports?exports:t)[r]=s[r]}}(window,function(){return function(t){var e={};function s(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,s),i.l=!0,i.exports}return s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},s.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=10)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(9),i=s(8),o=s(7),n=s(6);var a;!function(t){t.BINARY="BINARY",t.RELU="RELU",t.SIGMOIDAL="SIGMOIDAL",t.HYPERBOLIC_TANGENT="HYPERBOLIC_TANGENT"}(a=e.ActivationFunctionType||(e.ActivationFunctionType={}));const c={[a.BINARY]:r.Binary,[a.RELU]:n.ReLU,[a.SIGMOIDAL]:o.Sigmoidal,[a.HYPERBOLIC_TANGENT]:i.HyperbolicTangent};class h{constructor(t=a.BINARY){this.default=t,this.setCallback(),this.setCallbackPrime()}static init(t){return new h(t)}activation(t){return this.callback(t)}prime(t){return this.callbackPrime(t)}setCallback(){this.callback=c[this.default].activation}setCallbackPrime(){this.callbackPrime=c[this.default].prime}}e.ActivationFunction=h},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(0);e.SynapticProcessor=class{constructor(t,e=.3){this.error=0,this.activationFunction=r.ActivationFunction.init(t),this.setLearningFactor(e)}output(){return this.activationFunction.activation(this.synapse)}recalculateWeights(t){const e=this.outputExpected-this.output();this.delta=this.learningRate*e;for(let e=0;e<t.length;e++)t[e]+=this.data[e]*this.delta}calculateSynapses(t,e){this.synapse=0;for(let e=0;e<t.length;e++)this.synapse+=this.data[e]*t[e];return this.synapse+=e,this}calculateError(){return this.error=this.outputExpected-this.output(),this}setData(t){return this.data=t.slice(),this}setOutputExpected(t){return this.outputExpected=t,this}setLearningFactor(t){return this.learningRate=t,this}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(1);e.Perceptron=class{constructor(t,e=(()=>{})){this.weights=null,this.funcBack=e,this.synapticProcessor=new r.SynapticProcessor(t),this.dataStack=[]}addData(t,e){return this.dataStack.push([t,e]),this}learn(){this.weights||this.assignWeights();let t=0;const e=()=>{let s=!1;for(let t=0;t<this.dataStack.length;t++)this.synapticProcessor.setData(this.dataStack[t][0]).setOutputExpected(this.dataStack[t][1]).calculateSynapses(this.weights,this.threshold).calculateError(),0!==this.synapticProcessor.error&&(this.synapticProcessor.recalculateWeights(this.weights),this.threshold+=this.synapticProcessor.delta,s=!0,this.funcBack());if(s){if(++t>=8e3)throw t=0,Error("Maximum error limit reached");return e()}t=0};return e(),this}process(t){return this.synapticProcessor.setData(t).calculateSynapses(this.weights,this.threshold).output()}setWeights(t){return this.weights=t,this}createWeight(){const t=-.5,e=.49-t;let s=0;for(;!s;)s=parseFloat((Math.random()*e+t).toFixed(4));return s}assignWeights(t=null){t||(t=this.dataStack[0][0].length);const e=new Float64Array(t);for(let s=0;s<t;s++)e[s]=this.createWeight();return this.setWeights(e),this.threshold=this.createWeight(),this.funcBack(),this}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(0),i=s(2);e.Neuron=class extends i.Perceptron{constructor(t=r.ActivationFunctionType.SIGMOIDAL){super(t),this.error=0,this.synapse=0,this.outputNeurons=[],this.inputNeurons=[]}learn(t){return t&&(this.synapticProcessor.data=t),this.currentData=this.synapticProcessor.data,this.weights||(this.assignWeights(this.currentData.length),this.setBeforeWeights(this.weights.slice())),this.synapticProcessor.calculateSynapses(this.weights,this.threshold),this.synapse=this.synapticProcessor.synapse,this}backpropagation(){for(let t=0;t<this.inputNeurons.length;t++)this.inputNeurons[t].calculateHiddenError(t);this.inputNeurons.length>0&&this.inputNeurons[0].backpropagation()}recalculateWeights(){const t=this.synapticProcessor.learningRate*this.error;let e=0;for(let s=0;s<this.weights.length;s++)0!==this.currentData[s]&&(e=.77*(this.weights[s]-this.beforeWeights[s]),this.beforeWeights[s]=this.weights[s],this.weights[s]+=this.currentData[s]*t+e);this.threshold+=t}output(){return this.synapticProcessor.activationFunction.activation(this.synapse)}process(){return this.synapticProcessor.calculateSynapses(this.weights,this.threshold),this.synapse=this.synapticProcessor.synapse,this.output()}calculateErrorOfOutput(t){const e=t-this.output();this.calculateErrorDerivated(e)}calculateHiddenError(t){let e=0;for(let s=0;s<this.outputNeurons.length;s++){const r=this.outputNeurons[s];e+=r.weights[t]*r.error}return this.calculateErrorDerivated(e),this}calculateErrorDerivated(t){return this.error=t*this.prime(),this}prime(){return this.synapticProcessor.activationFunction.prime(this.synapse)}setBeforeWeights(t){return this.beforeWeights=t,this}setThreshold(t){return this.threshold=t,this}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(0),i=s(3),o=s(1);e.Layer=class{constructor(t=r.ActivationFunctionType.SIGMOIDAL,e){this.layers=[],this.activationFunction=t,this.synapticProcessor=new o.SynapticProcessor(this.activationFunction,e)}add(t){const e=this.create(t),s=this.layers.push(e)-1,r=this.layers[s-1];return void 0===r?this:(e.forEach(t=>{t.inputNeurons=r}),r.forEach(t=>{t.outputNeurons=e}),this)}forEach(t){for(let e=0;e<this.layers.length;e++)t(this.layers[e],e)}get(t){return this.layers[t]}getLast(){return this.get(this.layers.length-1)}create(t){const e=[];for(let s=0;s<t;s++)e[s]=new i.Neuron(this.activationFunction),e[s].synapticProcessor=this.synapticProcessor;return e}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(0),i=s(4);e.Backpropagation=class{constructor(t={epochs:1e3,activationFunction:r.ActivationFunctionType.SIGMOIDAL,learningRate:.3,verbose:!1}){this.error=0,this.activationFunction=t.activationFunction,this.layers=new i.Layer(this.activationFunction,t.learningRate),this.epochs=t.epochs,this.verbose=t.verbose,this.history={loss:[]}}learn(t){this.datasetInputToFloatArray(t),this.runEpoch(t);let e=1;for(;e<=this.epochs;)this.history.loss.push(this.error),e++,this.verbose&&e%1e3==0&&console.log(this.error,e),this.runEpoch(t);return this}process(t){let e=[];return t=new Float64Array(t),this.verbose&&console.log(t),this.layers.forEach(s=>{e.length>0&&(t=new Float64Array(e),e=[]),this.layers.synapticProcessor.setData(t);for(let t=0;t<s.length;t++){const r=s[t];e[t]=r.process()}}),this.verbose&&console.log(e),e}addLayer(t){return this.layers.add(t),this}importModel(t){return t.layers.forEach(t=>{this.addLayer(t)}),t.weights.forEach((e,s)=>{this.layers.get(s).forEach((r,i)=>{r.setWeights(new Float64Array(e[i])).setBeforeWeights(r.weights.slice()).setThreshold(t.thresholds[s][i])})}),this}exportModel(){let t={layers:[],thresholds:[],weights:[]};return this.layers.forEach(e=>{t.layers.push(e.length);const s=t.thresholds.push([]),r=t.weights.push([]);let i=t.thresholds[s-1],o=t.weights[r-1];e.forEach(t=>{o.push(Array.from(t.weights)),i.push(t.threshold)})}),t}datasetInputToFloatArray(t){for(let e=0;e<t.length;e++){const s=t[e];s.input=new Float64Array(s.input)}}runEpoch(t){for(let e=0;e<t.length;e++){const s=t[e];this.forwardpropagation(s),this.backpropagation(s.output),this.layers.forEach(t=>{for(let e=0;e<t.length;e++)t[e].recalculateWeights()})}}forwardpropagation({input:t}){let e=[],s=new Float64Array(t);return this.layers.forEach(t=>{e.length>0&&(s=new Float64Array(e),e=[]),this.layers.synapticProcessor.setData(s);for(let s=0;s<t.length;s++){const r=t[s];e[s]=r.learn().output()}}),this}backpropagation(t){const e=this.layers.getLast();let s=0;for(let r=0;r<e.length;r++){const i=e[r];i.calculateErrorOfOutput(t),i.backpropagation(),s+=i.error*i.error}this.error=s/2}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.activation=function(t){return t>0?t:0},t.prime=function(t){return t}}(e.ReLU||(e.ReLU={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.activation=function(t){return 1/(1+Math.E**-t)},t.prime=function(t){const e=Math.E**t;return e/(e+1)**2}}(e.Sigmoidal||(e.Sigmoidal={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){function e(t){return Math.tanh(t)}t.activation=e,t.prime=function(t){const s=e(t);return 1-s*s}}(e.HyperbolicTangent||(e.HyperbolicTangent={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.activation=function(t){return t>=0?1:0}}(e.Binary||(e.Binary={}))},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=s(2);e.Perceptron=r.Perceptron;const i=s(5);e.Backpropagation=i.Backpropagation}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,